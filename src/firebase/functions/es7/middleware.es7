import * as admin from 'firebase-admin';
import Busboy from 'busboy';
import * as BodyParser from 'body-parser';
import { logger } from './Logger';

/**
 * List of all middleware used by Cloud Functions.
 */
const cors = require('cors')({ origin: true });

const validateFirebaseToken = async (req, res, next) => {
  // Authorization takes place either by the Authorization header, or by
  // a session cookie.
  const hasAuthorization = req.headers.authorization != null &&
    req.headers.authorization.startsWith('Bearer ');

  if (!hasAuthorization) {
    logger.error(`Could not find Firebase ID token in Authentication header.`);
    res.status(403).send('Unauthorized');
    return;
  }

  logger.log(`Found Firebase ID token in Authentication header.`);
  const token = req.headers.authorization.split('Bearer ')[1];

  try {
    await admin.auth().verifyIdToken(token);
    next();
  } catch (error) {
    logger.log(`Failed to verify Firebase token. Error: %s`, error);
    res.status(403).send('Unauthorized');
  }
};

const parseJson = BodyParser.json();
const parseUrlEncoded = BodyParser.urlencoded({ extended: true });

const parseRawBody = (req, res, next) => {
  // Only parse raw body for POST, multipart requests.
  if (req.rawBody != null || req.method !== 'POST' ||
    !req.headers['content-type'].startsWith('multipart/form-data')) {
    return next();
  }

  const options = {
    length: req.headers['content-length'],
    limit: '10mb',
    encoding: contentType.parse(req).parameters.charset,
  };

  // Even if can't parse the raw body, keep on going with request; maybe
  // it won't matter.
  getRawBody(req, options, (err, string) => {
    if (err)
      return next(err)

    req.rawBody = string;
    return next();
  })
};

const parseImage = (req, res, next) => {
  // Only parse POST, multipart data.
  if (req.method !== 'POST' ||
    !req.headers['content-type'].startsWith('multipart/form-data')) {
    return next();
  }

  // Parse incoming HTML form data (multipart annoyances).
  const busboy = new Busboy({
    headers: req.headers
  });

  let fileBuffer = new Buffer('');
  req.files = {
    file: []
  };
  req.fields = {};

  // When a new file arrives, append it.
  busboy.on('file', (fieldName, file, fileName, encoding, mimeType) => {
    file.on('data', (data) => {
      fileBuffer = Buffer.concat([fileBuffer, data]);
    });

    file.on('end', () => {
      const file_object = {
        fieldName,
        originalName: fileName,
        encoding,
        mimeType,
        buffer: fileBuffer
      };

      req.files.file.push(file_object);
    });
  });

  busboy.on('field', (fieldName, value, fieldNameTrunc, valueTrunc, encoding,
    mimeType) => {
    req.fields[fieldName] = value;
  });

  busboy.end(req.rawBody);

  busboy.on('finish', () => {
    return next();
  });
};

export {
  cors,
  parseImage,
  parseJson,
  parseRawBody,
  parseUrlEncoded,
  validateFirebaseToken,
};
